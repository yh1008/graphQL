---
swagger: "2.0"
info:
  version: "1.0.0"
  title: "cloudappProject3"
host: "br1l3wine3.execute-api.us-east-1.amazonaws.com"
basePath: "/swaggerv3"
schemes:
- "https"
paths:
  /demo:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          500.*:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\n{\n    \"Error\
                \ Message\" : $input.json('$.errorMessage'),\n    \"Details\" : $input.json('$cause.errorMessage')\n\
                }"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{\n    \"Hello\": \"world\"\n}"
          422.*:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\n{\n    \"Error\
                \ Message\" : $input.json('$.errorMessage'),\n    \"Details\" : $input.json('$cause.errorMessage')\n\
                }"
          404.*:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\n{\n    \"Error\
                \ Message\" : $input.json('$.errorMessage'),\n    \"Details\" : $input.json('$cause.errorMessage')\n\
                }"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_templates"
        type: "mock"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Accept,Origin,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /demo/addresses:
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        400:
          description: "400 response"
        500:
          description: "500 response"
        404:
          description: "404 response"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseTemplates:
              application/json: "\n{\n\n\"create operation\" : \"succeed\"\n\n}"
          .*404.*:
            statusCode: "404"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                #set ($bodyObj = $util.parseJson($input.body))\n\n{\n\n\"error message\"\
                \ : \"$errorMessageObj.message\"\n\n}"
          .*400.*:
            statusCode: "400"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                #set ($bodyObj = $util.parseJson($input.body))\n\n{\n\n\"error message\"\
                \ : \"$errorMessageObj.message\"\n\n}"
          .*500.*:
            statusCode: "500"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                #set ($bodyObj = $util.parseJson($input.body))\n\n{\n\n\"error message\"\
                \ : \"$errorMessageObj.message\"\n\n}"
        requestTemplates:
          application/json: "\n{\n    \"operation\": \"create\",\n    \"tableName\"\
            : \"addresses\",\n    \"payload\": {\n        \"item\": $input.json('$')\n\
            \    }\n}"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:722850008576:function:comsLambda/invocations"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Accept,Origin,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /demo/addresses/{id}:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{\n    \"city\": $input.json('$.city'),\n    \"num\"\
                \ : $input.json('$.num'),\n    \"street\" : $input.json('$.street'),\n\
                \    \"zipcode\" : $input.json('$.zipcode'),\n    \"delivery_point_barcode\"\
                \ : $input.json('$.delivery_point_barcode'),\n     \"link\": {\n \
                \       \"address\": \"https://oqw8vpic39.execute-api.us-east-1.amazonaws.com/v1/demo/addresses/$input.params(\"\
                id\")\"\n    }\n}\n"
          .*404.*:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                #set ($bodyObj = $util.parseJson($input.body))\n\n{\n\n\"error message\"\
                \ : \"$errorMessageObj.message\"\n\n}"
          .*400.*:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                #set ($bodyObj = $util.parseJson($input.body))\n\n{\n\n\"error message\"\
                \ : \"$errorMessageObj.message\"\n\n}"
          .*422.*:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                #set ($bodyObj = $util.parseJson($input.body))\n\n{\n\n\"error message\"\
                \ : \"$errorMessageObj.message\"\n\n}"
          .*500.*:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                #set ($bodyObj = $util.parseJson($input.body))\n\n{\n\n\"error message\"\
                \ : \"$errorMessageObj.message\"\n\n}"
        requestTemplates:
          application/json: "{\n    \"operation\": \"read\",\n    \"tableName\": \"\
            addresses\",\n    \"payload\": {\n        \"key\": {\n            \"delivery_point_barcode\"\
            : \"$input.params('id')\"\n        }\n    }\n}"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:722850008576:function:comsLambda/invocations"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "aws"
    delete:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          .*404.*:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                #set ($bodyObj = $util.parseJson($input.body))\n\n{\n\n\"error message\"\
                \ : \"$errorMessageObj.message\"\n\n}"
          .*400.*:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                #set ($bodyObj = $util.parseJson($input.body))\n\n{\n\n\"error message\"\
                \ : \"$errorMessageObj.message\"\n\n}"
          .*422.*:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                #set ($bodyObj = $util.parseJson($input.body))\n\n{\n\n\"error message\"\
                \ : \"$errorMessageObj.message\"\n\n}"
          .*500.*:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                #set ($bodyObj = $util.parseJson($input.body))\n\n{\n\n\"error message\"\
                \ : \"$errorMessageObj.message\"\n\n}"
        requestTemplates:
          application/json: "{\n    \"operation\": \"delete\",\n    \"tableName\"\
            : \"addresses\",\n    \"payload\": {\n        \"key\": {\n           \
            \ \"Delivery_Point_Barcode\": \"$input.params('id')\"\n        }\n   \
            \ }\n}"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:722850008576:function:comsLambda/invocations"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Accept,Origin,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /demo/customers:
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "\n{\n\n\"create operation\" : \"succeed\"\n\n}"
          .*404.*:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                #set ($bodyObj = $util.parseJson($input.body))\n\n{\n\n\"error message\"\
                \ : \"$errorMessageObj.message\"\n\n}"
          .*400.*:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                #set ($bodyObj = $util.parseJson($input.body))\n\n{\n\n\"error message\"\
                \ : \"$errorMessageObj.message\"\n\n}"
          .*422.*:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                #set ($bodyObj = $util.parseJson($input.body))\n\n{\n\n\"error message\"\
                \ : \"$errorMessageObj.message\"\n\n}"
          .*500.*:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                #set ($bodyObj = $util.parseJson($input.body))\n\n{\n\n\"error message\"\
                \ : \"$errorMessageObj.message\"\n\n}"
        requestTemplates:
          application/json: "{\n    \"operation\": \"create\",\n    \"tableName\"\
            : \"customers\",\n    \"payload\": {\n        \"item\": $input.json('$')\n\
            \    }\n}"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:722850008576:function:comsLambda/invocations"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /demo/customers/{email}:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "email"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{\n    \"firstname\": $input.json('$.firstname'),\n\
                \    \"lastname\": $input.json('$.lastname'),\n    \"phonenumber\"\
                : $input.json('$.phonenumber'),\n    \"email\": $input.json('$.email'),\n\
                \    \"link\": {\n        \"address\": \"https://oqw8vpic39.execute-api.us-east-1.amazonaws.com/v1/demo/addresses/$input.path('$.delivery_point_barcode')\"\
                \n    }\n}"
          .*404.*:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                #set ($bodyObj = $util.parseJson($input.body))\n\n{\n\n\"error message\"\
                \ : \"$errorMessageObj.message\"\n\n}"
          .*400.*:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                #set ($bodyObj = $util.parseJson($input.body))\n\n{\n\n\"error message\"\
                \ : \"$errorMessageObj.message\"\n\n}"
          .*422.*:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                #set ($bodyObj = $util.parseJson($input.body))\n\n{\n\n\"error message\"\
                \ : \"$errorMessageObj.message\"\n\n}"
          .*500.*:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                #set ($bodyObj = $util.parseJson($input.body))\n\n{\n\n\"error message\"\
                \ : \"$errorMessageObj.message\"\n\n}"
        requestTemplates:
          application/json: "\n{\n    \"operation\": \"read\",\n    \"tableName\"\
            : \"customers\",\n    \"payload\": {\n        \"key\": {\n           \
            \ \"email\":\"$input.params('email')\"\n        }\n    }\n}"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:722850008576:function:comsLambda/invocations"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "aws"
    put:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "email"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          .*404.*:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                #set ($bodyObj = $util.parseJson($input.body))\n\n{\n\n\"error message\"\
                \ : \"$errorMessageObj.message\"\n\n}"
          .*400.*:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                #set ($bodyObj = $util.parseJson($input.body))\n\n{\n\n\"error message\"\
                \ : \"$errorMessageObj.message\"\n\n}"
          .*422.*:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                #set ($bodyObj = $util.parseJson($input.body))\n\n{\n\n\"error message\"\
                \ : \"$errorMessageObj.message\"\n\n}"
          .*500.*:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                #set ($bodyObj = $util.parseJson($input.body))\n\n{\n\n\"error message\"\
                \ : \"$errorMessageObj.message\"\n\n}"
        requestTemplates:
          application/json: "{\n    \"operation\": \"update\",\n    \"tableName\"\
            : \"customers\",\n    \"payload\": {\n        \"key\": {\n           \
            \ \"email\": \"$input.params('email')\"\n        },\n        \"values\"\
            : $input.json('$')\n    }\n}"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:722850008576:function:comsLambda/invocations"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "aws"
    delete:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "email"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          .*404.*:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                #set ($bodyObj = $util.parseJson($input.body))\n\n{\n\n\"error message\"\
                \ : \"$errorMessageObj.message\"\n\n}"
          .*400.*:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                #set ($bodyObj = $util.parseJson($input.body))\n\n{\n\n\"error message\"\
                \ : \"$errorMessageObj.message\"\n\n}"
          .*422.*:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                #set ($bodyObj = $util.parseJson($input.body))\n\n{\n\n\"error message\"\
                \ : \"$errorMessageObj.message\"\n\n}"
          .*500.*:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                #set ($bodyObj = $util.parseJson($input.body))\n\n{\n\n\"error message\"\
                \ : \"$errorMessageObj.message\"\n\n}"
        requestTemplates:
          application/json: "{\n    \"operation\": \"delete\",\n    \"tableName\"\
            : \"customers\",\n    \"payload\": {\n        \"key\": {\n           \
            \ \"email\": \"$input.params('email')\"\n        }\n    }\n}"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:722850008576:function:comsLambda/invocations"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "email"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,OPTIONS,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /demo/property:
    post:
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:722850008576:function:comsLambda/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
  /demo/property/{property}:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "property"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        400:
          description: "400 response"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
          .*400.*:
            statusCode: "400"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                #set ($bodyObj = $util.parseJson($input.body))\n\n{\n\n\"error message\"\
                \ : \"$errorMessageObj.message\"\n\n}"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:722850008576:function:comsLambda/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    post:
      produces:
      - "application/json"
      parameters:
      - name: "property"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        400:
          description: "400 response"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
          .*400.*:
            statusCode: "400"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                #set ($bodyObj = $util.parseJson($input.body))\n\n{\n\n\"error message\"\
                \ : \"$errorMessageObj.message\"\n\n}"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:722850008576:function:comsLambda/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    put:
      produces:
      - "application/json"
      parameters:
      - name: "property"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        400:
          description: "400 response"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
          .*400.*:
            statusCode: "400"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                #set ($bodyObj = $util.parseJson($input.body))\n\n{\n\n\"error message\"\
                \ : \"$errorMessageObj.message\"\n\n}"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:722850008576:function:comsLambda/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    delete:
      produces:
      - "application/json"
      parameters:
      - name: "property"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        400:
          description: "400 response"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
          .*400.*:
            statusCode: "400"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                #set ($bodyObj = $util.parseJson($input.body))\n\n{\n\n\"error message\"\
                \ : \"$errorMessageObj.message\"\n\n}"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:722850008576:function:comsLambda/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "property"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /demo/property/{property}/{franchise}:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "property"
        in: "path"
        required: true
        type: "string"
      - name: "franchise"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        400:
          description: "400 response"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
          .*400.*:
            statusCode: "400"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                #set ($bodyObj = $util.parseJson($input.body))\n\n{\n\n\"error message\"\
                \ : \"$errorMessageObj.message\"\n\n}"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:722850008576:function:comsLambda/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    post:
      produces:
      - "application/json"
      parameters:
      - name: "property"
        in: "path"
        required: true
        type: "string"
      - name: "franchise"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        400:
          description: "400 response"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
          .*400.*:
            statusCode: "400"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                #set ($bodyObj = $util.parseJson($input.body))\n\n{\n\n\"error message\"\
                \ : \"$errorMessageObj.message\"\n\n}"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:722850008576:function:comsLambda/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    put:
      produces:
      - "application/json"
      parameters:
      - name: "property"
        in: "path"
        required: true
        type: "string"
      - name: "franchise"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        400:
          description: "400 response"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
          .*400.*:
            statusCode: "400"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                #set ($bodyObj = $util.parseJson($input.body))\n\n{\n\n\"error message\"\
                \ : \"$errorMessageObj.message\"\n\n}"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:722850008576:function:comsLambda/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    delete:
      produces:
      - "application/json"
      parameters:
      - name: "property"
        in: "path"
        required: true
        type: "string"
      - name: "franchise"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        400:
          description: "400 response"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
          .*400.*:
            statusCode: "400"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                #set ($bodyObj = $util.parseJson($input.body))\n\n{\n\n\"error message\"\
                \ : \"$errorMessageObj.message\"\n\n}"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:722850008576:function:comsLambda/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "property"
        in: "path"
        required: true
        type: "string"
      - name: "franchise"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /demo/property/{property}/{franchise}/{series}:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "property"
        in: "path"
        required: true
        type: "string"
      - name: "series"
        in: "path"
        required: true
        type: "string"
      - name: "franchise"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        400:
          description: "400 response"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
          .*400.*:
            statusCode: "400"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                #set ($bodyObj = $util.parseJson($input.body))\n\n{\n\n\"error message\"\
                \ : \"$errorMessageObj.message\"\n\n}"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:722850008576:function:comsLambda/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    post:
      produces:
      - "application/json"
      parameters:
      - name: "property"
        in: "path"
        required: true
        type: "string"
      - name: "series"
        in: "path"
        required: true
        type: "string"
      - name: "franchise"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        400:
          description: "400 response"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
          .*400.*:
            statusCode: "400"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                #set ($bodyObj = $util.parseJson($input.body))\n\n{\n\n\"error message\"\
                \ : \"$errorMessageObj.message\"\n\n}"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:722850008576:function:comsLambda/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    put:
      produces:
      - "application/json"
      parameters:
      - name: "property"
        in: "path"
        required: true
        type: "string"
      - name: "series"
        in: "path"
        required: true
        type: "string"
      - name: "franchise"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        400:
          description: "400 response"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
          .*400.*:
            statusCode: "400"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                #set ($bodyObj = $util.parseJson($input.body))\n\n{\n\n\"error message\"\
                \ : \"$errorMessageObj.message\"\n\n}"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:722850008576:function:comsLambda/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    delete:
      produces:
      - "application/json"
      parameters:
      - name: "property"
        in: "path"
        required: true
        type: "string"
      - name: "series"
        in: "path"
        required: true
        type: "string"
      - name: "franchise"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        400:
          description: "400 response"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
          .*400.*:
            statusCode: "400"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                #set ($bodyObj = $util.parseJson($input.body))\n\n{\n\n\"error message\"\
                \ : \"$errorMessageObj.message\"\n\n}"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:722850008576:function:comsLambda/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "property"
        in: "path"
        required: true
        type: "string"
      - name: "series"
        in: "path"
        required: true
        type: "string"
      - name: "franchise"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /demo/property/{property}/{franchise}/{series}/{episode}:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "episode"
        in: "path"
        required: true
        type: "string"
      - name: "property"
        in: "path"
        required: true
        type: "string"
      - name: "series"
        in: "path"
        required: true
        type: "string"
      - name: "franchise"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        400:
          description: "400 response"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
          .*400.*:
            statusCode: "400"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                #set ($bodyObj = $util.parseJson($input.body))\n\n{\n\n\"error message\"\
                \ : \"$errorMessageObj.message\"\n\n}"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:722850008576:function:comsLambda/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    post:
      produces:
      - "application/json"
      parameters:
      - name: "episode"
        in: "path"
        required: true
        type: "string"
      - name: "property"
        in: "path"
        required: true
        type: "string"
      - name: "series"
        in: "path"
        required: true
        type: "string"
      - name: "franchise"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        400:
          description: "400 response"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
          .*400.*:
            statusCode: "400"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                #set ($bodyObj = $util.parseJson($input.body))\n\n{\n\n\"error message\"\
                \ : \"$errorMessageObj.message\"\n\n}"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:722850008576:function:comsLambda/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    put:
      produces:
      - "application/json"
      parameters:
      - name: "episode"
        in: "path"
        required: true
        type: "string"
      - name: "property"
        in: "path"
        required: true
        type: "string"
      - name: "series"
        in: "path"
        required: true
        type: "string"
      - name: "franchise"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        400:
          description: "400 response"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
          .*400.*:
            statusCode: "400"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                #set ($bodyObj = $util.parseJson($input.body))\n\n{\n\n\"error message\"\
                \ : \"$errorMessageObj.message\"\n\n}"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:722850008576:function:comsLambda/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    delete:
      produces:
      - "application/json"
      parameters:
      - name: "episode"
        in: "path"
        required: true
        type: "string"
      - name: "property"
        in: "path"
        required: true
        type: "string"
      - name: "series"
        in: "path"
        required: true
        type: "string"
      - name: "franchise"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        400:
          description: "400 response"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
          .*400.*:
            statusCode: "400"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                #set ($bodyObj = $util.parseJson($input.body))\n\n{\n\n\"error message\"\
                \ : \"$errorMessageObj.message\"\n\n}"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:722850008576:function:comsLambda/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "episode"
        in: "path"
        required: true
        type: "string"
      - name: "property"
        in: "path"
        required: true
        type: "string"
      - name: "series"
        in: "path"
        required: true
        type: "string"
      - name: "franchise"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /echo:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\n    \"operation\": \"echo\",\n    \"payload\": \"\
            $context.identity.sourceIp\"\n}"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:722850008576:function:comsLambda/invocations"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
definitions:
  Empty:
    type: "object"
    title: "Empty Schema"
  Error:
    type: "object"
    properties:
      message:
        type: "string"
    title: "Error Schema"
